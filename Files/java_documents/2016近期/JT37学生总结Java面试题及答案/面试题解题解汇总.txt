面试题解
一。面向对象编程的三大特征
	1.封装	
		封装的实质就是将类的状态信息隐藏在类的内部，不允许外部程序直接访问，而是通过该类的set/get方法来实现对隐藏信息的操作和访问。
		反应了事物的相对独立性,有效避免了外部错误对此对象的影响，并且能对对象使用者由于大意产生错误操作引起预防的作用，实现松耦合关系，
		主要是隐藏类的实现细节，让使用者只能通过程序员规定的方法来访问数据，可以方便的加入存取控制语句，限制不合理的操作。
	2.继承
		继承可以解决编程中代码沉余的情况，是实现代码重用的重要手段之一，新建的类可以在不增加自身代码的情况下，通过从现有的类中继承其属性和方法，
		来充实自身内容，新类被称为子类，现有的类被称为父类。他的基本作用是代码重用性，和可扩展性。
	3.多态
		一个特定的类型变量可以引用不同类型的对象，并且自动的调用引用的对象的方法，也就是根据作用到的不同对象类型，响应不同的操作。方法重写是多态的基础
		可替换性，扩充性，接口性，灵活性，简化性。

二。String与StringBuffer的区别
		简单地说，就是一个变量和常量的关系。StringBuffer对象的内容可以修改；而String对象一旦产生后就不可以被修改，重新赋值其实是两个对象。
		
		StringBuffer在进行字符串处理时，不生成新的对象，在内存使用上要优于String类。所以在实际使用时，
		如果经常需要对一个字符串进行修改，例如插入、删除等操作，使用StringBuffer要更加适合一些。
		
		String:在String类中没有用来改变已有字符串中的某个字符的方法，由于不能改变一个java字符串中的某个单独字符，
		所以在JDK文档中称String类的对象是不可改变的。然而，不可改变的字符串具有一个很大的优点:编译器可以把字符串设为共享的。
		
		StringBuffer:StringBuffer类属于一种辅助类，可预先分配指定长度的内存块建立一个字符串缓冲区。这样使用StringBuffer类的append方法追加字符 比 String使用 + 操作符添加字符 到 一个已经存在的字符串后面有效率得多。因为使用 + 操作符每一次将字符添加到一个字符串中去时，字符串对象都需要寻找一个新的内存空间来容纳更大的字符串，这无凝是一个非常消耗时间的操作。添加多个字符也就意味着要一次又一次的对字符串重新分配内存。使用StringBuffer类就避免了这个问题。
		StringBuffer是线程安全的，在多线程程序中也可以很方便的进行使用，但是程序的执行效率相对来说就要稍微慢一些。
		StringBuffer的常用方法
		StringBuffer类中的方法要偏重于对字符串的变化例如追加、插入和删除等，这个也是StringBuffer和String类的主要区别。
		
三。final和finally。finalize的区别
	一。final
		如果一个类被声明为final，意味着它不能再派生出新的子类，不能作为父类被继承。因此一个类不能既被声明为 abstract的，又被声明为final的。将变量或方法声明为final，可以保证它们在使用中不被改变。被声明为final的变量必须在new一个对象时初始化（即只能在声明变量或构造器或代码块内初始化），而在以后的引用中只能读取，不可修改。被声明为final的方法也同样只能使用，不能覆盖(重写)。
	二。finally
		在异常处理时提供 finally 块来执行任何清除操作。如果抛出一个异常，那么相匹配的 catch 子句就会执行，然后控制就会进入 finally 块（如果有的话）。
	三。finalize
		方法名。Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的。它是在 Object 类中定义的，因此所有的类都继承了它。子类覆盖 finalize() 方法以整理系统资源或者执行其他清理工作。finalize() 方法是在垃圾收集器删除对象之前对这个对象调用的。注意：finalize不一定被jvm调用，只有当垃圾回收器要清除垃圾时才被调用。
		
四。重载和重写的区别
	重写方法的规则: 
		 1.参数列表必须完全与被重写的方法的相同,否则不能称其为重写而是重载. 
		 2.返回的类型必须一直与被重写的方法的返回类型相同,否则不能称其为重写而是重载. 
		 3.访问修饰符的限制一定要大于被重写方法的访问修饰符（public>protected>default>private） 
		 4.重写方法一定不能抛出新的检查异常或者比被重写方法申明更加宽泛的检查型异常．例如， 
		   父类的一个方法申明了一个检查异常IOException，在重写这个方法是就不能抛出Exception，只能抛出IOException的子类异常，可以抛出非检查异常． 
	而重载的规则： 
		1.必须具有不同的参数列表；     重载在同意个类中
		2.可以有不同的返回类型，只要参数列表不同就可以了； 
		3.可以有不同的访问修饰符； 
		4.可以抛出不同的异常； 

    重写和重载的区别在于： 
		 重写多态性起作用，对调用被重载过的方法可以大大减少代码的输入量，同一个方法名只要往里面传递不同的参数就可以拥有不同的功能或返回值． 
		 用好重写和重载可以设计一个结构清晰而简洁的类，可以说重写和重载在编写代码过程中的作用非同一般 
		 
五.请列举您经常使用的集合类型。什么是泛型、为什么要使用泛型
		什么是泛型？
			将对象的类型作为参数，指定到其他类活着方法上，从而保证类型转换的安全和稳定性，这就是泛型。泛型的本质就是参数化类型。

		为什么使用泛型有3点：
			1，类型安全。 泛型的主要目标是提高 Java 程序的类型安全。通过知道使用泛型定义的变量的类型限制，编译器可以在一个高得多的程度上验证类型假设。没有泛型，这些假设就只存在于程序员的头脑中（或者如果幸运的话，还存在于代码注释中）。
			2，消除强制类型转换。 泛型的一个附带好处是，消除源代码中的许多强制类型转换。这使得代码更加可读，并且减少了出错机会。
			3，潜在的性能收益。 泛型为较大的优化带来可能。在泛型的初始实现中，编译器将强制类型转换（没有泛型的话，程序员会指定这些强制类型转换）插入生成的字节码中。但是更多类型信息可用于编译器这一事实，为未来版本的 JVM 的优化带来可能。由于泛型的实现方式，支持泛型（几乎）不需要 JVM 或类文件更改。所有工作都在编译器中完成，编译器生成类似于没有泛型（和强制类型转换）时所写的代码，只是更能确保类型安全而已。
		
		使用泛型的一些规则与限制
			1.泛型的类型参数只能是类类型（包括自定义类），不能是简单类型。
			2.同一种泛型可以对应多个版本（因为参数类型是不确定的），不同版本的泛型类实例是不兼容的。
			3.泛型的类型参数可以有多个。
			4.泛型的参数类型可以使用extends语句，例如<T extends superclass>。习惯上成为“有界类型”。
			5.泛型的参数类型还可以是通配符类型。例如Class<?> classType = Class.forName(Java.lang.String);
	
六.请列举您经常遇到的5-10种异常类型
	1. java.lang.nullpointerexception
		调用了未经初始化的对象或者是不存在的对象，这个错误经常出现在创建图片，调用数组这些操作中，比如图片未经初始化，或者图片创建时的路径错误等等。
		数组的初始化是对数组分配需要的空间，而初始化后的数组，其中的元素并没有实例化，依然是空的，所以还需要对每个元素都进行初始化（如果要调用的话）
	
	2. java.lang.classnotfoundexception
		异常的解释是"指定的类不存在"，这里主要考虑一下类的名称和路径是否正确即可
		
	3. java.lang.arithmeticexception 
		 这个异常的解释是"数学运算异常"，比如程序中出现了除以零这样的运算就会出这样的异常，对这种异常，大家就要好好检查一下自己程序中涉及到数学运算的地方，公式是不是有不妥了
		 
	4. java.lang.arrayindexoutofboundsexception
		异常的解释是"数组下标越界"，现在程序中大多都有对数组的操作，因此在调用数组的时候一定要认真检查，看自己调用的下标是不是超出了数组的范围，一般来说，显示（即直接用常数当下标）调用不太容易出这样的错，但隐式（即用变量表示下标）调用就经常出错了，还有一种情况，是程序中定义的数组的长度是通过某些特定方法决定的，不是事先声明的，这个时候，最好先查看一下数组的length，以免出现这个异常。
	
	5. java.lang.illegalargumentexception	
		这个异常的解释是"方法的参数错误",因此一旦发现这个异常，我们要做的，就是赶紧去检查一下方法调用中的参数传递是不是出现了错误。
		
	6.java.lang.illegalaccessexception
		 这个异常的解释是"没有访问权限"，当应用程序要调用一个类，但当前的方法即没有对该类的访问权限便会出现这个异常。对程序中用了package的情况下要注意这个异常。
	
	操作数据库异常：SQLException
	输入输出异常：IOException
	字符串转换为数字异常：NumberFormatException
	文件未找到异常：FileNotFoundException
	java.lang.ClassFormatError 类格式错误。当Java虚拟机试图从一个文件中读取Java类，而检测到该文件的内容不符合类的有效格式时抛出。
	java.lang.InstantiationError 实例化错误。当一个应用试图通过Java的new操作符构造一个抽象类或者接口时抛出该异常.
	classCastException 类型转换错误，通常是进行强制类型转换时候出的错误。下面对产生
	fileNotFoundException这是IO异常，一般是文件找不到，说明你File的路径写的不对，其中

七.请简要介绍springMVC与Spring的区别
	1、ssh中的spring充当的是MVC中的Model的职能，他也可以集成hibernate等，但它不提供hibernate的功能，仅为集成。
	2、Spring MVC是MVC架构的整体实现，包括了MVC三项框架，有了它你就不需要再去集成struts和hibernate了，都是由它自己提供。

八.请简要介绍hibernate的三种状态
	临时状态(Transient)
		由 new命令开辟内存空间的java对象,例如：User user=new User();临 时对象在内存孤立存在,它是携带信息的载体,不和数据库的数据有任何关联关系.
		(a) 如 果没有变量对该对象进行引用,它将被gc回收；
		(b) 在Hibernate中,可通过 session的save()或saveOrUpdate()方法将瞬时对象与数据库相关联,并将数据对应的插入数据库中,此时该临时对象转变成持久化对 象.
	持久状态(Persistent)
		处于该状态的对象在数据库中具有对应的记录,并拥有一个持久化标识.通过session的get()、load() 等方法获得的对象都是持久对象。
		持久化对象被修改变更后，不会马上同步到数据库，直到数据库事务提交。在同步之前，持久化 对象是脏的（Dirty）。
		(a) 如果是用hibernate的delete()方法,对应的持久对象就变成临时对象,因数据库中 的对应数据已被删除,该对象不再与数据库的记录关联.
		(b) 当一个session执行close()或 clear()、evict()之后,持久对象变成游离对象,此时该对象虽然具有数据库识别值,但它已不在HIbernate持久层的管理之下.
		持久对象具有如下特点:
		(1)和session实例关联;
		(2)在数据库中有与之关联的记录,并 拥有持久化标识.
	游离状态(Detached)
		当与某持久对象关联的session被关闭后,该持久对象转变为游离对象.当游离对象被重新关联到session上 时,又再次转变成持久对象（在Detached其间的改动将被持久化到数据库中）。 游离对象拥有数据库的识别值,但已不在持久化管理范围之内。
		(a) 通 过update()、saveOrUpdate()等方法,游离对象可转变成持久对象.
		(b) 如果是用hibernate的delete()方法,对应的游离对象就变成临时对象,因数据库中的 对应数据已被删除,该对象不再与数据库的记录关联.
		(c) 在没有任何变量引用它时,它将被gc在适当的 时候回收；
		游离对象具有如下特点:
		(1)本质上与瞬时对象相同,在没有任何变量引用它时,JVM会在适当的时候将它回收;
		(2)比瞬时对象多了一个数据库记录标识值.
		
九.请介绍一下什么是回调函数？通常在哪些情况下使用回调函数？
	所谓回调函数只是一个跟语言无关的概念。说白了就是A调用了B，B在适当的时候又反回去调用A。这样的东西都可以叫做回调函数。从上面也可以看出来，多数时候因为是单线程，A没有必要等B来调用它，因为A在调用完B之后完全可以调用自己需要的操作。
	回调通常是在两个不同的线程间需要同步的情况下才出现的
	因为可以把调用者与被调用者分开。调用者不关心谁是被调用者，所有它需知道的，只是存在一个具有某种特定原型、某些限制条件(如返回值为int)的被调用函数。 

十.多线程的几种实现方式
	继承Thread类实现多线程
		继承Thread类的方法尽管被我列为一种多线程实现方式，但Thread本质上也是实现了Runnable接口的一个实例，它代表一个线程的实例，
		并且，启动线程的唯一方法就是通过Thread类的start()实例方法。start()方法是一个native方法，它将启动一个新线程，并执行run()方法。
		这种方式实现多线程很简单，通过自己的类直接extend Thread，并复写run()方法，就可以启动新线程并执行自己定义的run()方法
		MyThread myThread = new MyThread();  
		myThread.start(); 
		
	实现Runnable接口方式实现多线程
		如果自己的类已经extends另一个类，就无法直接extends Thread，此时，必须实现一个Runnable接口，
			MyThread myThread = new MyThread();  
			Thread thread = new Thread(myThread);  
			thread.start();
			
十一.请介绍一下线程的生命周期，线程被唤醒后是否能够立即执行？为什么？
		新建（new Thread）
			当创建Thread类的一个实例（对象）时，此线程进入新建状态（未被启动）。
			例如：Thread  t1=new Thread();
		就绪（runnable）
			线程已经被启动，正在等待被分配给CPU时间片，也就是说此时线程正在就绪队列中排队等候得到CPU资源。例如：t1.start();
		运行（running）
			线程获得CPU资源正在执行任务（run()方法），此时除非此线程自动放弃CPU资源或者有优先级更高的线程进入，线程将一直运行到结束。
		死亡（dead）
			当线程执行完毕或被其它线程杀死，线程就进入死亡状态，这时线程不可能再进入就绪状态等待执行。
			自然终止：正常运行run()方法后终止
			异常终止：调用stop()方法让一个线程终止运行
		堵塞（blocked）
			由于某种原因导致正在运行的线程让出CPU并暂停自己的执行，即进入堵塞状态。
			正在睡眠：用sleep(long t) 方法可使线程进入睡眠方式。一个睡眠着的线程在指定的时间过去可进入就绪状态。
			正在等待：调用wait()方法。（调用motify()方法回到就绪状态）
			被另一个线程所阻塞：调用suspend()方法。（调用resume()方法恢复）
		2.常用方法
			void run()   创建该类的子类时必须实现的方法
			void start() 开启线程的方法
			static void sleep(long t) 释放CPU的执行权，不释放锁
			static void sleep(long millis,int nanos)
			final void wait()释放CPU的执行权，释放锁
			final void notify()
			static void yied()可以对当前线程进行临时暂停（让线程将资源释放出来）
		线程被唤醒后是否能够立即执行
			当然是要执行
			被唤醒并且被执行的线程是从上次阻塞的位置从下开始运行，也就是从wait()方法后开始执行。

十二。请介绍您常用的文件访问类型
		2P65
		File类  FileWriter类 FileInputStream类 FileOutputStream类

十三。请列举几种sql优化方法
		1。选择最有效率的表名顺序(只在基于规则的优化器中有效)： 
			ORACLE 的解析器按照从右到左的顺序处理FROM子句中的表名，FROM子句中写在最后的表(基础表 driving table)将被最先处理，
			在FROM子句中包含多个表的情况下,你必须选择记录条数最少的表作为基础表。如果有3个以上的表连接查询, 
			那就需要选择交叉表(intersection table)作为基础表, 交叉表是指那个被其他表所引用的表. 
		2.WHERE子句中的连接顺序．： 
			ORACLE采用自下而上的顺序解析WHERE子句,根据这个原理,表之间的连接必须写在其他WHERE条件之前, 那些可以过滤掉最大数量记录的条件必须写在WHERE子句的末尾. 
		3.ELECT子句中避免使用 ‘ * ‘： 
			ORACLE在解析的过程中, 会将'*' 依次转换成所有的列名, 这个工作是通过查询数据字典完成的, 这意味着将耗费更多的时间 
		4.减少访问数据库的次数： 
			ORACLE在内部执行了许多工作: 解析SQL语句, 估算索引的利用率, 绑定变量 , 读数据块等； 
		5.在SQL*Plus , SQL*Forms和Pro*C中重新设置ARRAYSIZE参数, 可以增加每次数据库访问的检索数据量 ,建议值为200 
		6.使用DECODE函数来减少处理时间： 
			使用DECODE函数可以避免重复扫描相同记录或重复连接相同的表. 
		7.整合简单,无关联的数据库访问： 
			如果你有几个简单的数据库查询语句,你可以把它们整合到一个查询中(即使它们之间没有关系) 
		8.删除重复记录： 
			最高效的删除重复记录方法 ( 因为使用了ROWID)例子： 
			DELETE  FROM  EMP E  WHERE  E.ROWID > (SELECT MIN(X.ROWID) 
			FROM  EMP X  WHERE  X.EMP_NO = E.EMP_NO); 
		9.用TRUNCATE替代DELETE： 
			当删除表中的记录时,在通常情况下, 回滚段(rollback segments ) 用来存放可以被恢复的信息. 如果你没有COMMIT事务,
			ORACLE会将数据恢复到删除之前的状态(准确地说是恢复到执行删除命令之前的状况) 而当运用TRUNCATE时, 
			回滚段不再存放任何可被恢复的信息.当命令运行后,数据不能被恢复.因此很少的资源被调用,执行时间也会很短. 
			(译者按: TRUNCATE只在删除全表适用,TRUNCATE是DDL不是DML) 
		10.尽量多使用COMMIT： 
			只要有可能,在程序中尽量多使用COMMIT, 这样程序的性能得到提高,需求也会因为COMMIT所释放的资源而减少: 
			COMMIT所释放的资源: 
			a. 回滚段上用于恢复数据的信息. 
			b. 被程序语句获得的锁 
			c. redo log buffer 中的空间 
			d. ORACLE为管理上述3种资源中的内部花费 
		11.用Where子句替换HAVING子句： 
			避免使用HAVING子句, HAVING 只会在检索出所有记录之后才对结果集进行过滤. 这个处理需要排序,总计等操作. 
			如果能通过WHERE子句限制记录的数目,那就能减少这方面的开销. (非oracle中)on、where、having这三个都可以加条件的子句中，
			on是最先执行，where次之，having最后，因为on是先把不符合条件的记录过滤后才进行统计，它就可以减少中间运算要处理的数据，
			按理说应该速度是最快的，where也应该比having快点的，因为它过滤数据后才进行sum，在两个表联接时才用on的，所以在一个表的时候，
			就剩下where跟having比较了。在这单表查询统计的情况下，如果要过滤的条件没有涉及到要计算字段，那它们的结果是一样的，只是where可以使用rushmore技术，
			而having就不能，在速度上后者要慢如果要涉及到计算的字段，就表示在没计算之前，这个字段的值是不确定的，根据上篇写的工作流程，
			where的作用时间是在计算之前就完成的，而having就是在计算后才起作用的，所以在这种情况下，两者的结果会不同。在多表联接查询时，
			on比where更早起作用。系统首先根据各个表之间的联接条件，把多个表合成一个临时表后，再由where进行过滤，然后再计算，计算完后再由having进行过滤。
			由此可见，要想过滤条件起到正确的作用，首先要明白这个条件应该在什么时候起作用，然后再决定放在那里 
		12.减少对表的查询： 
			在含有子查询的SQL语句中,要特别注意减少对表的查询.例子： 
				SELECT  TAB_NAME FROM TABLES WHERE (TAB_NAME,DB_VER) = ( SELECT 
			TAB_NAME,DB_VER FROM  TAB_COLUMNS  WHERE  VERSION = 604) 
		13.通过内部函数提高SQL效率.： 
			复杂的SQL往往牺牲了执行效率. 能够掌握上面的运用函数解决问题的方法在实际工作中是非常有意义的 
		14.使用表的别名(Alias)： 
			当在SQL语句中连接多个表时, 请使用表的别名并把别名前缀于每个Column上.这样一来,就可以减少解析的时间并减少那些由Column歧义引起的语法错误.
		15.用EXISTS替代IN、用NOT EXISTS替代NOT IN： 
			在许多基于基础表的查询中,为了满足一个条件,往往需要对另一个表进行联接.在这种情况下, 使用EXISTS(或NOT EXISTS)通常将提高查询的效率. 
			在子查询中,NOT IN子句将执行一个内部的排序和合并. 无论在哪种情况下,NOT IN都是最低效的 (因为它对子查询中的表执行了一个全表遍历). 
			为了避免使用NOT IN ,我们可以把它改写成外连接(Outer Joins)或NOT EXISTS. 
			例子： 
			（高效）SELECT * FROM  EMP (基础表)  WHERE  EMPNO > 0  AND  EXISTS (SELECT ‘X'  FROM DEPT  WHERE  DEPT.DEPTNO = EMP.DEPTNO  AND  LOC = ‘MELB') 
			(低效)SELECT  * FROM  EMP (基础表)  WHERE  EMPNO > 0  AND  DEPTNO IN(SELECT DEPTNO  FROM  DEPT  WHERE  LOC = ‘MELB') 
		16.识别'低效执行'的SQL语句： 
			虽然目前各种关于SQL优化的图形化工具层出不穷,但是写出自己的SQL工具来解决问题始终是一个最好的方法： 
			SELECT  EXECUTIONS , DISK_READS, BUFFER_GETS, 
			ROUND((BUFFER_GETS-DISK_READS)/BUFFER_GETS,2) Hit_radio, 
			ROUND(DISK_READS/EXECUTIONS,2) Reads_per_run, 
			SQL_TEXT 
			FROM  V$SQLAREA 
			WHERE  EXECUTIONS>0 
			AND  BUFFER_GETS > 0 
			AND  (BUFFER_GETS-DISK_READS)/BUFFER_GETS < 0.8 
			ORDER BY  4 DESC; 
			
十四。请介绍一下Java的内存回收机制
				Java的堆是一个运行时数据区,类的实例(对象)从中分配空间。Java虚拟机(JVM)的堆中储存着正在运行的应用程序所建立的所有对象，
			这些对象通过new、newarray、anewarray和multianewarray等指令建立，但是它们不需要程序代码来显式地释放。一般来说，堆的是由垃圾回收 来负责的，
			尽管JVM规范并不要求特殊的垃圾回收技术，甚至根本就不需要垃圾回收，但是由于内存的有限性，JVM在实现的时候都有一个由垃圾回收所管理的堆。
			垃圾回收是一种动态存储管理技术，它自动地释放不再被程序引用的对象，按照特定的垃圾收集算法来实现资源自动回收的功能。 
			垃圾收集能自动释放内存空间，减轻编程的负担。这使Java 虚拟机具有一些优点。首先，它能使编程效率提高。在没有垃圾收集机制的时候，
			可能要花许多时间来解决一个难懂的存储器问题。在用Java语言编程的时候，靠垃圾收集机制可大大缩短时间。其次是它保护程序的完整性,垃圾收集是Java语言安全性策略的一个重要部份。 
			垃圾收集的一个潜在的缺点是它的开销影响程序性能。Java虚拟机必须追踪运行程序中有用的对象, 而且最终释放没用的对象。这一个过程需要花费处理器的时间。
			其次垃圾收集算法的不完备性，早先采用的某些垃圾收集算法就不能保证100%收集到所有的废弃内存。
			当然随着垃圾收集算法的不断改进以及软硬件运行效率的不断提升，这些问题都可以迎刃而解。 
				
十伍。请说明一下JVM的堆区、栈区、方法区的作用
		堆区：
			村线程操纵的数据（对象形式存放）
			1 存储的全部是对象，每个对象包含一个与之对应的class信息--class的目的是得到操作指令
			2 jvm只有一个堆区（heap）被所有线程共享，堆区中不存放基本类型和对象引用，只存放对象本身。
		栈区：
			1 每个线程包含一个栈区,栈中只保存基础数据类型的对象和自定义对象的引用(不是对象)。对象都存放在堆区中。
			2 每个战中的数据(基础数据类型和对象引用)都是私有的，其他栈不能访问。
			3 栈分为3个部分：基本类型变量去，执行环境上下文，操作指令区(存放操作指令).
		方法区：
			存放线程所执行的字节码指令。
			1 又叫静态区,跟堆一样.被所有线程共享.方法区包含：所有的class和static变量.
			2 方法区中包含的是在整个程序中唯一的元素.如class static 变量.
			
十六。请介绍什么事hash桶
		5P30
十七。请介绍一下springMVC的工作原理
		1、客户端发出一个http请求给web服务器，web服务器对http请求进行解析，如果匹配DispatcherServlet的请求映射路径（在web.xml中指定），
			web容器将请求转交给DispatcherServlet.
		2、DipatcherServlet接收到这个请求之后将根据请求的信息（包括URL、Http方法、请求报文头和请求参数Cookie等）
			以及HandlerMapping的配置找到处理请求的处理器（Handler）。
		3-4、DispatcherServlet根据HandlerMapping找到对应的Handler,将处理权交给Handler（Handler将具体的处理进行封装），
			再由具体的HandlerAdapter对Handler进行具体的调用。
		5、Handler对数据处理完成以后将返回一个ModelAndView()对象给DispatcherServlet。
		6、Handler返回的ModelAndView()只是一个逻辑视图并不是一个正式的视图，DispatcherSevlet通过ViewResolver将逻辑视图转化为真正的视图View。
		7、Dispatcher通过model解析出ModelAndView()中的参数进行解析最终展现出完整的view并返回给客户端。
		
十八。假设现在数据库中有一张员工表（id,name,birthday），请分别使用mysql和oracle的查询语句查询出姓张的员工中，年纪最大的五位员工的详细信息，并按年龄降序排列。

十九。在静态方法中是否可以使用非静态成员变量？为什么？
		非静态的是属于某个对象的。
		你在静态方法中调用，到底调用哪个对象啊？系统不知道啊。
		所以不允许了。
		类的静态成员(变量和方法)属于类本身，在类加载的时候就会分配内存，可以通过类名直接去访问；非静态成员（变量和方法）属于类的对象，
			所以只有在类的对象产生（创建类的实例）时才会分配内存，然后通过类的对象（实例）去访问。
		在一个类的静态成员中去访问其非静态成员之所以会出错是因为在类的非静态成员不存在的时候类的静态成员就已经存在了，访问一个内存中不存在的东西当然会出错。
		
二十。请介绍spring的两大特性。
		IOC控制反转 AOP面向切面
		
		IOC：中文名（控制反转/依赖注入），可以看成是类实例的注入。（比如在action类里引用service层的类实例。之所以叫控制反转，是因为
		原来要引用service中的类实例，要在action类里去通过关键字new，去新建一个service实例。这个新建的控制权在action类。spring的IOC
		则是把新建service类实例的权利给了spring容器（通过注解的方式））。
		
		AOP：
		1.概念介绍：所谓AOP，即Aspect orientied program,就是面向方面的编程，
		2.解释什么是方面：贯穿到系统的各个模块中的系统一个功能就是一个方面，
			比如，记录日志，统一异常处理，事务处理，全限检查，这些功能都是软件系统
			的一个面，而不是一点，在各个模块中都要出现。
		3.什么是面向方面编程：把系统的一个方面的功能封装成对象的形式来处理
		4.怎么进行面向方面编程：把功能模块对应的对象作为切面嵌入到原来的各个系统模块中，
			采用代理技术，代理会调用目标，同时把切面功能的代码（对象）加入进来，所以，
			用spring配置代理对象时只要要配两个属性，分别表示目标和切面对象（Advisor）。
			
二十一。是么是事务、事务具有哪些特性？
		一．什么是事务 
			事务是应用程序中一系列严密的操作，所有操作必须成功完成，否则在每个操作中所作的所有更改都会被撤消。也就是事务具有原子性，
			一个事务中的一系列的操作要么全部成功，要么一个都不做。 
			事务的结束有两种，当事务中的所以步骤全部成功执行时，事务提交。如果其中一个步骤失败，将发生回滚操作，撤消撤消之前到事务开始时的所以操作。 
		二．事务的 ACID 
			事务具有四个特征：原子性（ Atomicity ）、一致性（ Consistency ）、隔离性（ Isolation ）和持续性（ Durability ）。这四个特性简称为 ACID 特性。 
			1 、原子性 (Atomicity)
				事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做 
			2 、一致性 (Consistency) 
				事 务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。
				如果数据库系统 运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，
				这时数据库就处于一种不正确的状态，或者说是 不一致的状态。 
			3 、隔离性 (Isolation)
				一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。 
			4 、持续性 (Durability)
				也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其它操作或故障不应该对其执行结果有任何影响。 

二十二。请介绍session和cookie的区别
		cookie 和session 的区别：
		1、cookie数据存放在客户的浏览器上，session数据放在服务器上。
		2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗
		   考虑到安全应当使用session。
		3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能
		   考虑到减轻服务器性能方面，应当使用COOKIE。
		4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。
		5、所以个人建议：
		   将登陆信息等重要信息存放为SESSION
		   其他信息如果需要保留，可以放在COOKIE中
		   
二十三。请介绍您常用的几种设计模式
		5P89
		1.单例模式
			懒汉式单例、饿汉式单例、登记式单例三种
			但有时候我们希望在创建某类对象时，无论创建多少次该类对象只有一份在内存中。这就是单例模式。如果我们要实现单例模式首先要保证构造函数私有化，
				即不允许用户随意调用我本类的构造函数，因为只要通过new操作创建对象，必定要在堆中开辟空间，这样就无法实现单例了。
			一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。
		
		2.工厂模式
			简单工厂、工厂模式和抽象工厂模式
			简单工厂模式又称静态工厂方法模式。重命名上就可以看出这个模式一定很简单。它存在的目的很简单：定义一个用于创建对象的接口。
			在简单工厂模式中,一个工厂类处于对产品类实例化调用的中心位置上,它决定那一个产品类应当被实例化, 如同一个交通警察站在来往的车辆流中,
				决定放行那一个方向的车辆向那一个方向流动一样。
			先来看看它的组成：
			 1) 工厂类角色：这是本模式的核心，含有一定的商业逻辑和判断逻辑。在java中它往往由一个具体类实现。
			 2) 抽象产品角色：它一般是具体产品继承的父类或者实现的接口。在java中由接口或者抽象类来实现。
			 3) 具体产品角色：工厂类所创建的对象就是此角色的实例。在java中由一个具体类实现。
		 3.工厂方法模式
			工厂方法模式是简单工厂模式的进一步抽象化和推广，工厂方法模式里不再只由一个工厂类决定那一个产品类应当被实例化,这个决定被交给抽象工厂的子类去做。
		　　来看下它的组成：
			   1)抽象工厂角色： 这是工厂方法模式的核心，它与应用程序无关。是具体工厂角色必须实现的接口或者必须继承的父类。在java中它由抽象类或者接口来实现。
			   2)具体工厂角色：它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象。
			   3)抽象产品角色：它是具体产品继承的父类或者是实现的接口。在java中一般有抽象类或者接口来实现。
			   4)具体产品角色：具体工厂角色所创建的对象就是此角色的实例。在java中由具体的类来实现。
			   工厂方法模式使用继承自抽象工厂角色的多个子类来代替简单工厂模式中的“上帝类”。正如上面所说，这样便分担了对象承受的压力；
				   而且这样使得结构变得灵活 起来——当有新的产品（即暴发户的汽车）产生时，只要按照抽象产品角色、抽象工厂角色提供的合同来生成，
				   那么就可以被客户使用，而不必去修改任何已有的代 码。可以看出工厂角色的结构也是符合开闭原则的！
	   3.门面模式
			门面模式要求一个子系统的外部与其内部的通信必须通过一个统一的门面(Facade)对象进行。门面模式提供一个高层次的接口，使得子系统更易于使用。
			就如同医院的接待员一样，门面模式的门面类将客户端与子系统的内部复杂性分隔开，使得客户端只需要与门面对象打交道，而不需要与子系统内部的很多对象打交道。
			门面(Facade)角色：客户端可以调用这个角色的方法。此角色知晓相关的(一个或者多个)子系统的功能和责任。在正常情况下，
				本角色会将所有从客户端发来的请求委派到相应的子系统去。
			子系统(subsystem)角色：可以同时有一个或者多个子系统。每一个子系统都不是一个单独的类，而是一个类的集合。每一个子系统都可以被客户端直接调用，
				或者被门面角色调用。子系统并不知道门面的存在，对于子系统而言，门面仅仅是另外一个客户端而已。
				
		4.策略模式
			1）策略模式是一个比较容易理解和使用的设计模式，策略模式是对算法的封装，它把算法的责任和算法本身分割开，委派给不同的对象管理。
				策略模式通常把一个系列的算法封装到一系列的策略类里面，作为一个抽象策略类的子类。用一句话来说，就是“准备一组算法，并将每一个算法封装起来，
				使得它们可以互换”。
			2）在策略模式中，应当由客户端自己决定在什么情况下使用什么具体策略角色。2）
			3）策略模式仅仅封装算法，提供新算法插入到已有系统中，以及老算法从系统中“退休”的方便，策略模式并不决定在何时使用何种算法，算法的选择由客户端来决定。
				这在一定程度上提高了系统的灵活性，但是客户端需要理解所有具体策略类之间的区别，以便选择合适的算法，这也是策略模式的缺点之一，
				在一定程度上增加了客户端的使用难度
				
二十四。请介绍ArrayList和LinkedList的区别
		ArrayList:他是采用和数组一样的连续的顺序存储，通过下标查找效率高，但是插入效率比较底
		LinkedList:采用的是链表存储方式，当数据添加或删除修改比较多的时候 ，但查找效率比较底
		
二十伍。请介绍树的前序遍历、中序遍历、后续遍历
			5P37
		http://blog.csdn.net/feliciafay/article/details/6816871
	
二十六。请使用递归算法计算n的阶乘、
		程序调用自身的编程技巧称为递归（ recursion）。递归做为一种算法在程序设计语言中广泛应用。 一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，
		它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，
		大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。
		一般来说，递归需要有边界条件、递归前进段和递归返回段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回。
		计算任意数n的阶乘 n!=n*(n-1)!
		public class JieCheng
		{
		 public static int run(int n){
		  if (n == 1) {
				 return n;
				}else {
		   return n * run( n - 1 );
		  }
		 }
		}

二十七。如果要判断两个用new关键字创建的自定义类的对象是否相等，在比较前需要对该对象的类做哪些操作？
		http://www.cnblogs.com/drbbq/p/5406142.html
		
二十八。如果需要对自定义类的对象进行排序，在排序前需要对类做哪些操作？comparable
		这个类首先要实现Comparable接口，此接口强行对实现它的每个类的对象进行整体排序，这中排序被称为类的自然排序，类的comparableTo()方法被称为他的自然比较发，
		此方法用于比较此对象与指定对象的顺序，如果该对象小于，等于或着大于，则分别返回负整数，零或者正负数。
		1.导入相关类 2.初始化数据 3.遍历排序前集合并输出 4.使用Collection类的sort()方法排序 5.遍历排序后集合并输出 6.查找排序后某元素的索引
	
		http://blog.csdn.net/dliyuedong/article/details/21788731
		
二十九。对于一个有序数组，长度为130，使用二分查找算法查找某个值，那么最多需要查找多少次？
		5P67
		http://blog.csdn.net/zhliro/article/details/47016167
		
三十。什么是装箱和拆箱？
		装箱就是把基础类型封装成一个类。比如把int封装成Integer，这时你就不能把他当成一个数了，
		而是一个类了，对他的操作就需要用它的方法了。拆箱就是把类转换成基础类型。比如你算个加法什么的是不能用类的，
		就得把它转换成基本类型，jdk5以后已经可以自动转换了貌似。基本类型你应该懂的吧，就那八种
		
三十一。抽象类和接口有什么区别
		抽象类的成员可以具有访问级别,而接口的成员全部public级别
		抽象类可以搜索包含字段,而接口不可以,
		抽象类可以继承接口,而接口不能继承抽象类
		抽象类的成员可以具有具体实现,而接口不行
		抽象的子类可以选择性实现其基类的抽象方法,而接口的子类必须实现
		
三十二。java中的值传递和引用传递到底有什么区别
			值传递：(形式参数类型是基本数据类型)：方法调用时，实际参数把它的值传递给对应的形式参数，
				形式参数只是用实际参数的值初始化自己的存储单元内容，是两个不同的存储单元，所以方法执行中形式参数值的改变不影响实际参数的值。
			引用传递：(形式参数类型是引用数据类型参数)：也称为传地址。方法调用时，实际参数是对象(或数组)，这时实际参数与形式参数指向同一个地址，
				在方法执行中，对形式参数的操作实际上就是对实际参数的操作，这个结果在方法结束后被保留了下来，所以方法执行中形式参数的改变将会影响实际参数。
				
				
三十三。java集合框架
同时List接口又有两个常用的实现类ArrayList和LinkedList

    1)ArrayList:

      ArrayList数组线性表的特点为:类似数组的形式进行存储，因此它的随机访问速度极快。

      ArrayList数组线性表的缺点为:不适合于在线性表中间需要频繁进行插入和删除操作。因为每次插入和删除都需要移动数组中的元素。
 

      可以这样理解ArrayList就是基于数组的一个线性表，只不过数组的长度可以动态改变而已。

      对于ArrayList的详细使用信息以及创建的过程可以查看jdk中ArrayList的源码，这里不做过多的讲解。 

      对于使用ArrayList的开发者而言，下面几点内容一定要注意啦，尤其找工作面试的时候经常会被问到。

      注意啦！！！！！！！！


    2)LinkedList

       LinkedList的链式线性表的特点为: 适合于在链表中间需要频繁进行插入和删除操作。

       LinkedList的链式线性表的缺点为: 随机访问速度较慢。查找一个元素需要从头开始一个一个的找。速度你懂的。

      可以这样理解LinkedList就是一种双向循环链表的链式线性表，只不过存储的结构使用的是链式表而已。

      对于LinkedList的详细使用信息以及创建的过程可以查看jdk中LinkedList的源码，这里不做过多的讲解。

      对于使用LinkedList的开发者而言，下面几点内容一定要注意啦，尤其找工作面试的过程时候经常会被问到。

      注意啦！！！！！！！！

      a.LinkedList和ArrayList的区别和联系

      ArrayList数组线性表的特点为:类似数组的形式进行存储，因此它的随机访问速度极快。

      ArrayList数组线性表的缺点为:不适合于在线性表中间需要频繁进行插入和删除操作。因为每次插入和删除都需要移动数组中的元素。

       LinkedList的链式线性表的特点为: 适合于在链表中间需要频繁进行插入和删除操作。

       LinkedList的链式线性表的缺点为: 随机访问速度较慢。查找一个元素需要从头开始一个一个的找。速度你懂的。

		HashMap与Hashtable的区别：

		Hashtable实现Map接口，继承自古老的Dictionary类，实现一个key-value的键值映射表。任何非空的（key-value）均可以放入其中。

		区别主要有三点：

		1.      Hashtable是基于陈旧的Dictionary实现的，而HashMap是基于Java1.2引进的Map接口实现的；

		2.      Hashtable是线程安全的，而HashMap是非线程安全的，我们可以使用外部同步的方法解决这个问题。

		3.      HashMap可以允许你在列表中放一个key值为null的元素，并且可以有任意多value为null，而Hashtable不允许键或者值为null。	   
				
三十四。同步方法和同步方法的代码块区别(synchronized)
		同步方法控制对类成员变量的访问，每个实例对应一把锁，方法一旦执行，就独站该锁，直到冲该方法返回是才将锁释放，此后被阻塞的线程才能获得该锁，重新进入该执行状态
		同步代码块必须获得对象的锁才能执行，具体机制与同步方法一致，由于可以针对任意代码块，且课任意指定上锁对象，故灵活性高
		
三十伍。HashMap和Hashtable的区别
		ashMap和Hashtable都实现了Map接口，但决定用哪一个之前先要弄清楚它们之间的分别。主要的区别有：线程安全性，同步(synchronization)，以及速度。

		HashMap几乎可以等价于Hashtable，除了HashMap是非synchronized的，并可以接受null(HashMap可以接受为null的键值(key)和值(value)，而Hashtable则不行)。
		HashMap是非synchronized，而Hashtable是synchronized，这意味着Hashtable是线程安全的，多个线程可以共享一个Hashtable；而如果没有正确的同步的话，多个线程是不能共享HashMap的。Java 5提供了ConcurrentHashMap，它是HashTable的替代，比HashTable的扩展性更好。
		另一个区别是HashMap的迭代器(Iterator)是fail-fast迭代器，而Hashtable的enumerator迭代器不是fail-fast的。所以当有其它线程改变了HashMap的结构（增加或者移除元素），将会抛出ConcurrentModificationException，但迭代器本身的remove()方法移除元素则不会抛出ConcurrentModificationException异常。但这并不是一个一定发生的行为，要看JVM。这条同样也是Enumeration和Iterator的区别。
		由于Hashtable是线程安全的也是synchronized，所以在单线程环境下它比HashMap要慢。如果你不需要同步，只需要单一线程，那么使用HashMap性能要好过Hashtable。
		HashMap不能保证随着时间的推移Map中的元素次序是不变的。
		
三十六什么是OpenSessionInView
		说说为什么使用OpenSessionInView  当hibernate+spring配合使用的时候，如果设置了lazy=true,那么在读取数据的时候，
		当读取了父数据后，hibernate 会自动关闭session，这样，当要使用子数据的时候，系统会抛出lazyinit的错误，
		这时就需要使用spring提供的 OpenSessionInViewFilter,  OpenSessionInViewFilter主要是保持Session状态直到request将全部页面发送到客户端，
		这样就可以解决延迟加载带来的问题 。
		
三十七。延迟加载
		1、说说为什么使用lazy  当使用Hibernate中的one-to-many、many-to one、many-to-many关系映射的时候，一个对象中会包含一个或多个Set来关联其他的对象。例如：user-groups，当程序取user 对象时，如果一个用户有多个自定义组，那么程序将把组的信息也读取出来，在log中可以看到两个sql的输出。但是在页面的显示上，也许并不需要显示这个用户相关组的信息，这样系统的消耗就白白浪费了，
		、于是hibernate提供了lazy（延迟加载）的方法来避免这一情况的发生，我们只需要在 user.hbm.xml中设置lazy=true，就能实现延迟加载。
		
三十八。hibernate工作原理
		hibernate原理
	核心类和接口
		核心类：Configuration
		核心接口: SessionFactory、Session
	hibernate.cfg.xml配置文件中配置数据库相关信息，	通过Configuration核心类来加载hibernate
	核心配置文件得到数据库会话工厂SessionFactory, 根据SessionFactory得到Session会话，通过
	Session会话操作实体类之前需要通过ORM技术将实体类和数据库表在*.hbm.xml文件中形成映射
	关系，因为hibernate.cfg.xml管理了*.hbm.xml映射文件，所以直接通过Session会话对实体类进行
	CRUD操作。
	
	hibernate和jdbc的区别					 				  
	查询效率：jdbc因为直接操作数据库，所以查询效率相比hibernate要高，hibernate要对实体类和数据库
				表字段之间做映射关系的维护，所以查询效率相对来说要低。
	开发效率：jdbc相当于手动式，SQL代码和封装都需要手动完成，而hibernate相当于自动化，
			由于对jdbc进行封装，所以底层代码不需要开发人员编写，所以开发效率hibernate要高。
	什么hibernate框架
	hibernate是一个开源免费的框架，是一个优秀的持久层解决方案，对JDBC进行封装，开发人员
	不需要在关心底层的实现，只需要注重业务上的逻辑。
    
	hibernate框架作用
	通过OR-Mapping技术将实体类和数据库表形成映射关系，开发人员直接可以通过操作实体类，可以
	不需要写SQL语句来操作数据库，大大的减少了开发的代码量，提高了开发人员的效率，方便扩展，
	维护，由于不用直接操作数据库，方便数据库的移植。
	
	
三十九。Hibernare get/load方法
		load方式检索不到的话会抛出org.hibernate.ObjectNotFoundException异常
		get方法检索不到的话会返回null
四十。Hibernate/Mybatis区别
		 开发速度

				难易度

				Hibernate的真正掌握要比Mybatis困难，Hibernate比mybatis更加重量级一些。

				Mybatis框架相对简单很容易上手，但也相对简陋些。

				开发工作量

				Mybatis需要我们手动编写SQL语句，回归最原始的方式，所以可以按需求指定查询的字段，提高程序的查询效率。

				Hibernate也可以自己写SQL语句来指定需要查询的字段，但这样破坏了Hibernate封装以及简洁性。

		3. 数据库移植性

				Mybatis由于所有SQL都是依赖数据库书写的，所以扩展性，迁移性比较差。

				Hibernate与数据库具体的关联都在XML中，所以HQL对具体是用什么数据库并不是很关心。

	4. 缓存机制对比

			相同点

			Hibernate和Mybatis的二级缓存除了采用系统默认的缓存机制外，都可以通过实现你自己的缓存或为其他第三方缓存方案，创建适配器来完全覆盖缓存行为。

			不同点

			Hibernate的二级缓存配置在SessionFactory生成的配置文件中进行详细配置，然后再在具体的表-对象映射中配置是那种缓存。

			MyBatis的二级缓存配置都是在每个具体的表-对象映射中进行详细配置，这样针对不同的表可以自定义不同的缓存机制。并且Mybatis可以在命名空间中共享相同的缓存配置和实例，通过Cache-ref来实现。

			两者比较

			因为Hibernate对查询对象有着良好的管理机制，用户无需关心SQL。所以在使用二级缓存时如果出现脏数据，系统会报出错误并提示。而MyBatis在这一方面，使用二级缓存时需要特别小心。
			如果不能完全确定数据更新操作的波及范围，避免Cache的盲目使用。否则，脏数据的出现会给系统的正常运行带来很大的隐患。

	5. 两者对比总结

			两者相同点

		Hibernate与MyBatis都可以是通过SessionFactoryBuider由XML配置文件生成SessionFactory，然后由SessionFactory 生成Session，最后由Session来开启执行事务和SQL语句。其中SessionFactoryBuider，SessionFactory，Session的生命周期都是差不多的。如下图所示：

